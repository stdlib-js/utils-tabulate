{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport indexOf from '@stdlib/utils-index-of';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Generates a frequency table.\n*\n* ## Notes\n*\n* -   The output is an array of arrays. Each sub-array corresponds to a unique value in the input collection and is structured as follows:\n*\n*     -   0: unique value\n*     -   1: value count\n*     -   2: frequency percentage\n*\n* @param {Collection} collection - input collection\n* @throws {TypeError} first argument must be a collection\n* @returns {(Array<Array>|Array)} frequency table\n*\n* @example\n* var arr = [ 'beep', 'boop', 'foo', 'beep' ];\n*\n* var out = tabulate( arr );\n* // returns [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]\n*/\nfunction tabulate( collection ) {\n\tvar count;\n\tvar tmp;\n\tvar len;\n\tvar out;\n\tvar v;\n\tvar i;\n\tvar j;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( format( '1XlAh,O3', collection ) );\n\t}\n\tcount = 0;\n\ttmp = [];\n\tout = [];\n\n\t// For each collection element, determine if we've seen the element before. If not, cache a reference which points to its location in the output array; otherwise, update the running count.\n\tlen = collection.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = collection[ i ];\n\t\tcount += 1;\n\t\tj = indexOf( tmp, v );\n\t\tif ( j === -1 ) {\n\t\t\ttmp.push( v );\n\t\t\tout.push( [ v, 1, 0 ] );\n\t\t} else {\n\t\t\tout[ j ][ 1 ] += 1;\n\t\t}\n\t}\n\t// Compute percentages...\n\tlen = out.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ][ 2 ] = out[ i ][ 1 ] / count;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default tabulate;\n"],"names":["tabulate","collection","count","tmp","len","out","v","i","j","isCollection","TypeError","format","length","indexOf","push"],"mappings":";;yRAkDA,SAASA,EAAUC,GAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAcR,GACnB,MAAM,IAAIS,UAAWC,EAAQ,WAAYV,IAQ1C,IANAC,EAAQ,EACRC,EAAM,GACNE,EAAM,GAGND,EAAMH,EAAWW,OACXL,EAAI,EAAGA,EAAIH,EAAKG,IACrBD,EAAIL,EAAYM,GAChBL,GAAS,GAEG,KADZM,EAAIK,EAASV,EAAKG,KAEjBH,EAAIW,KAAMR,GACVD,EAAIS,KAAM,CAAER,EAAG,EAAG,KAElBD,EAAKG,GAAK,IAAO,EAKnB,IADAJ,EAAMC,EAAIO,OACJL,EAAI,EAAGA,EAAIH,EAAKG,IACrBF,EAAKE,GAAK,GAAMF,EAAKE,GAAK,GAAML,EAEjC,OAAOG,CACR"}